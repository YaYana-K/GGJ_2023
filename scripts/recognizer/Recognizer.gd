class_name Recognizer
extends Node2D

const INPUT_LIMIT = 20
const NUM_SYMBOLS = 15
const SAVE_PATH = "res://scripts/recognizer/"

@export var TRAINING = true
@export var LOG_TRAINING_SET = false
@export var RECOGNIZE = true
@export var UPDATE_TRAINING_SET = false
@export var LOG_INPUT = false
@export var TAKE_INPUT = true: set = _set_take_input
@export var LOG_RECOGNIZE = false
@export var DRAW_LINE = true
@export var SAVE_NN = true
@export var LOAD_NN = false
@export_range(1, NUM_SYMBOLS) var TRESHOLD: int = 3

var events = {}
var event_acc: Vector2 = Vector2(0, 0)
var points: PackedVector2Array = PackedVector2Array([])
var line: Array[Vector2] = []
var angles: Array[float] = []
var NN: NeuralNetwork = NeuralNetwork.new()

var curr_symbol = 0
var inputs = [
	#H_LINE_R
	[
		[-0.02469117380679], [-0.06776650249958], [0.15979486703873], [-0.56681793928146, -0.08625768125057], [-0.06453828513622], [0.0378512442112], [-0.04140454530716], [0.06578609347343], [-0.00611732900143], [0.11458688229322], [0.02332394942641], [0.00771343894303], [-0.05468251556158],
	],
	#H_LINE_L
	[
		[3.10416960716248], [3.13668966293335], [2.81524419784546], [2.82169556617737], [3.05813431739807], [3.05756402015686], [3.08263301849365], [3.13721537590027], [3.13348317146301], [3.07846713066101], [3.12478423118591], [3.13386917114258], [3.10995149612427],
	],
	#V_LINE_D
	[
		[1.51004660129547], [1.55892980098724], [1.45298755168915], [1.56316435337067], [1.49156630039215], [1.56217753887177], [1.50247514247894], [1.55764174461365], [1.53378343582153], [1.56410872936249], [1.54965555667877], [1.50583207607269], [1.5333571434021],
	],
	#V_LINE_U
	[
		[-1.5868775844574], [-1.59242331981659], [-1.61650717258453, -1.29542148113251], [-1.58043265342712], [-1.53848135471344], [-1.47315406799316], [-1.48360335826874], [-1.53337621688843], [-1.51712715625763], [-1.49602270126343], [-1.57079637050629], [-1.54100072383881], [-1.53206360340118],
	],
	#CARET_UP_R
	[
		[-1.28894412517548, -0.86639893054962, 1.28112506866455], [-1.08932828903198, -0.64359509944916, 0.84992206096649, 1.36609470844269], [-1.03377413749695, -0.71315771341324, -0.34883388876915, 0.55439513921738, 1.19997119903564], [-1.08726525306702, 0.43248227238655, 1.34776222705841], [-1.09353089332581, 1.68181431293488], [-0.99658077955246, 1.74001502990723], [-1.071129322052, -0.64359509944916, 0.89615094661713, 1.33642494678497], [-1.66425490379334, -1.10722708702087, -0.80707544088364, 1.88756287097931], [-1.05806291103363, -0.72673958539963, 1.11339902877808, 1.47003495693207], [-0.92026382684708, -0.57352977991104, 0.97246861457825, 1.46408140659332], [-1.0723797082901, -0.68061697483063, 1.37343847751617], [-1.03843283653259, -0.74847567081451, 0.03998650982976, 1.23559391498566], [-1.03293824195862, -0.57916396856308, 0.52815967798233, 1.39459538459778],
	],
	#CARET_UP_L
	[
		[-1.89248812198639, 1.95760357379913], [-1.97714376449585, -2.43286967277527, -2.84303855895996, 1.76604044437408], [-1.84565508365631, -2.51601457595825, 2.06577491760254], [-1.57079637050629, -1.95023822784424, 1.98753070831299], [-1.92199540138245, -2.37196826934814, 3.01186490058899, 2.2195508480072], [-2.04526305198669, -2.45335173606873, -2.8104362487793, 2.45105004310608, 1.88635420799255], [-1.90310823917389, -2.2620370388031, -2.9180736541748, 2.1587085723877], [-1.87032496929169, -2.35609650611877, -3.10588645935059, 2.29955387115479, 1.81847310066223], [-1.81693494319916, -2.1893482208252, 2.30997586250305, 2.02563333511353], [-2.05780935287476, -2.55349969863892, 2.0343656539917], [-1.87385976314545, 2.22901058197021], [-1.97859299182892, 1.42346322536469], [-2.02239155769348, 1.38019394874573],
	],
	#CARET_DOWN_R
	[
		[1.17607474327087, 0.08315744251013, -0.82197594642639, -1.15932750701904], [1.14667534828186, -0.78549605607986, -1.15547013282776], [1.5045348405838, -1.02752757072449], [1.22760570049286, -0.20468078553677, -1.12722194194794], [1.24771010875702, -0.94932079315186], [1.18807125091553, -0.57305538654327, -1.12692654132843], [1.2174197435379, -0.19743321835995, -1.02083742618561], [1.35906040668488, 0.78549605607986, -0.4637259542942, -1.00771594047546], [1.25662195682526, -1.0385594367981], [1.23789870738983, -0.48259380459785, -1.03046321868896], [1.24299550056458, -0.63512027263641, -1.19700527191162], [1.23632764816284, -1.50966012477875], [2.00381112098694, -0.50168663263321, -0.9057160615921],
	],
	#CARET_DOWN_L
	[
		[2.03603768348694, -2.28985548019409], [1.79682195186615, -2.08343410491943], [1.80233001708984, -2.21054077148438], [1.99042546749115, -3.03849101066589, -2.68404030799866, -2.24924111366272], [2.16355061531067, -2.60779857635498, -2.24627637863159], [2.05963373184204, -2.46727752685547], [1.96370947360992, -2.09377932548523], [1.98197901248932, -2.72085642814636, -2.19618844985962], [1.93557608127594, -2.04665875434875], [1.9295027256012, -2.06671857833862], [1.94849574565887, -1.63672542572021], [1.46016061306, -2.05568695068359], [2.04394006729126, -2.49316644668579, -2.02208948135376],
	],
	#LIGHTNING
	[
		[2.43514084815979, 0.33970281481743, 2.44608020782471, 2.11112952232361], [2.34335851669312, 0.50117188692093, 0.98288410902023, 2.46253252029419], [1.95374310016632, -0.07573180645704, 2.07449245452881], [2.01842355728149, -0.16079367697239, -0.59054410457611, 1.82558882236481], [2.04825186729431, 0.24502474069595, 0.88196802139282, 1.67385792732239, 2.12664413452148], [2.95539689064026, 2.62236213684082, 2.05160331726074, 0.90768831968307, 0.223817050457, 2.5889208316803], [1.91597890853882, -0.13042855262756, 1.81572890281677, 1.99702107906342], [2.13743686676025, -0.02919450215995, 2.0713164806366], [2.05273413658142, -0.10829161852598, 2.08156943321228], [2.05874824523926, -0.03086043708026, 2.0803050994873], [2.1587085723877, 0.40897923707962, 0.04947423562407, 2.08788013458252], [2.03148412704468, 0.09527081251144, 1.85879838466644, 2.12263870239258], [1.68004274368286, -0.49167218804359, 1.9213615655899],
	],
	#CARET_LEFT_D
	[
		[2.71325445175171, 1.7942305803299, 0.57200735807419, 0.12316009402275], [2.69655847549438, 0.49563360214233], [2.87485480308533, 2.40152025222778, 0.35376676917076], [2.42305254936218, 0.47791096568108, 0.7759724855423], [2.92167901992798, 0.56600344181061], [2.46798920631409, 0.72519129514694], [2.86458277702332, 0.38694414496422], [2.53149676322937, 0.4994290471077, 0.78982502222061], [2.80613017082214, 0.54946166276932, 0.42844226956367], [2.70876574516296, 0.89615094661713, 0.58009254932404], [2.46283435821533, 0.65812075138092], [2.62308526039124, 1.57079637050629, 0.62941080331802], [2.18465709686279, 0.89292174577713],
	],
	#CARET_LEFT_U
	[
		[-2.77273535728455, -0.38855162262917, -0.0906775444746], [-2.57438969612122, -0.72999686002731], [-2.7372522354126, -0.38872301578522], [-2.56084537506104, -0.59760814905167], [-2.59962463378906, -0.85765874385834, -0.62772250175476], [-2.84766912460327, -0.6717015504837], [-2.87570977210999, -1.24910449981689, -0.79843437671661], [-2.65643882751465, -1.45594203472137, -0.64359509944916, -0.32715770602226], [-2.55142331123352, -0.01425360608846], [-2.20721101760864, -2.67263960838318, -0.37726399302483], [-2.66427087783813, -2.09398984909058, -1.15264463424683, -0.18380212783813], [-2.39607548713684, -1.97363722324371, -1.06039154529572, -0.33492863178253], [-2.44978308677673, -2.11799359321594, -1.7306786775589, -1.08397805690765, -0.39735600352287],
	],
	#CARET_RIGHT_D
	[
		[0.18202641606331, 2.72911024093628], [0.55493289232254, 1.93471014499664, 2.30132174491882], [0.48190787434578, 0.87298995256424, 1.47264719009399, 1.91950440406799, 2.50875043869019], [0.50899201631546, 2.55424213409424], [0.04165072366595, 0.54373204708099, 1.00680112838745, 1.50099349021912, 2.01944303512573, 2.59500932693481], [0.15291509032249, 2.54440832138062], [0.72707408666611, 3.13228869438171, 2.78052258491516, 2.38701486587524], [0.34332683682442, 2.30116963386536], [0.5553006529808, 1.35216879844666, 1.70629787445068, 2.41454124450684], [0.50661730766296, 1.39523780345917, 2.02649259567261, 2.57708930969238], [0.37674820423126, 2.40261244773865], [0.40822044014931, 2.00312948226929, 2.54328036308289], [0.52027541399002, 2.48887586593628],
	],
	#CARET_RIGHT_U
	[
		[-0.05227027460933, -2.54096031188965, -2.83348321914673], [-0.27577194571495, -0.66113811731339, -1.05173456668854, -1.42601180076599, -2.08068490028381, -2.53903484344482], [0.11474268138409, -2.300861120224, -2.75220727920532], [-0.3513255417347, -2.56323599815369], [-0.02000124752522, -2.25411462783813], [-0.36905398964882, -2.45257210731506, -2.50741767883301], [0.24057956039906, -1.14945018291473, -1.62246429920197, -2.13086485862732, -2.45687961578369], [-0.02616194076836, -2.29376888275146], [-0.09323165565729, -0.89615088701248, -2.38704657554626], [-0.13056363165379, -1.86924028396606, -2.34683752059937, -2.60711145401001], [0.01139774918556, -2.29478287696838], [-0.24288418889046, -2.3547248840332, -2.05160331726074], [-0.23223252594471, -1.29783844947815, -2.39540243148804],
	],
	#CIRCLE_R
	[
		[2.44011044502258, 0.84651267528534, -0.4798122048378, -2.28817486763], [2.46578907966614, 0.63491588830948, -0.63785600662231, -2.29786729812622], [2.21420335769653, 1.670445561409, 0.9580682516098, 0.48570296168327, 0.02499968744814, -0.59550082683563, -1.08565008640289, -1.57079637050629, -1.83471071720123, -2.24544167518616, -2.79597473144531], [3.0584352016449, 2.4284348487854, 1.99735009670258, 1.60648846626282, 1.04847753047943, 0.71155595779419, 0.2915107011795, -0.22684174776077, -0.86226683855057, -1.37115049362183, -1.82511675357819, -2.49042153358459, -2.80679512023926], [-3.17794734636416, 2.59213089942932, 2.08194351196289, 1.65125167369843, 1.11321425437927, 0.54863649606705, 0.11713146418333, -0.33330482244492, -0.61638933420181, -0.95898598432541, -1.39489042758942, -1.91375827789307, -2.4226655960083, -2.83865189552307], [2.84303855895996, 2.43488192558289, 0.84425121545792, 0.54574197530746, -0.78071147203445, -2.46675610542297], [2.87757968902588, 2.21809434890747, 1.84904432296753, 1.57079637050629, 1.04904663562775, 0.51090639829636, 0.11067871749401, -0.3218092918396, -0.66113811731339, -1.0165764093399, -1.39273750782013, -1.87661898136139, -2.40910863876343], [-3.0099790096283, 2.67240166664124, 2.25962471961975, 1.88044238090515, 1.49098193645477, 1.09837865829468, 0.57728177309036, 0.10926201194525, -0.46372592449188, -0.78549605607986, -1.1619598865509, -1.57079637050629, -2.04691576957703, -2.41317796707153], [3.25649148622622, 2.65671944618225, 2.18324184417725, 1.89248812198639, 1.57079637050629, 1.21615445613861, 0.79831582307816, 0.44150465726852, -0.01020572613925, -0.84714555740356, -1.4843624830246, -1.87431120872498, -2.18700098991394, 3.25027496019472], [3.06480574607849, 2.34239888191223, 1.74113869667053, 1.28705489635468, 0.83673268556595, 0.47097304463387, 0.06473691761494, -0.48259380459785, -0.91804420948029, -1.45467722415924, -1.92277729511261, -2.26543831825256, -2.86201858520508], [3.24834901491274, 2.81043648719788, 2.29846882820129, 1.93647825717926, 1.60525870323181, 1.079714179039, 0.76422262191772, 0.39592012763023, 0.05191154032946, -0.43248227238655, -0.95672911405563, -1.44646537303925, -1.95760357379913, -2.85008192062378], [2.23174452781677, 1.75438356399536, 1.12064743041992, 0.55578225851059, 0.19002461433411, -0.13555392622948, -0.89974790811539, -1.45232939720154, -1.89653611183167, -2.38733649253845, -2.84303855895996], [-2.96936869621277, 2.57016611099243, 2.08799958229065, 1.35789847373962, 0.9026021361351, 0.40897923707962, 0.08675523847342, -0.40496265888214, -0.8479140996933, -1.37018167972565, -1.84904420375824, -2.9180736541748],
	],
	#CIRCLE_L
	[
		[0.72556722164154, 2.55717182159424, -2.44410538673401, -0.70739322900772], [0.6939634680748, 2.4788830280304, -2.63866662979126, -0.82056909799576], [0.74030035734177, 2.37333631515503, -2.77785897254944, -0.8901332616806], [0.24502474069595, 0.95313310623169, 1.46016061306, 1.88228607177734, 2.32384991645813, 2.96346569061279, -2.84730362892151, -2.6291196346283, -2.34343910217285, -1.83578968048096, -1.46254682540894, -0.83807861804962, -0.45614945888519], [-0.12064706534147, 0.31160399317741, 0.81251645088196, 1.52265024185181, 1.94506335258484, 2.41851615905762, 3.10933947563171, -2.76261639595032, -2.308513879776, -1.60525870323181, -1.18103814125061], [-0.392409324646, 0.18314589560032, 0.63144224882126, 1.35216879844666, 1.86219918727875, 2.25389194488525, 2.8104362487793, -2.98496055603027, -2.64970207214355, -2.15619611740112, -1.7434446811676, -1.09518074989319, -0.49790453910828], [-0.23378729820251, 0.34795117378235, 1.02233409881592, 1.40790116786957, 1.7810822725296, 2.26114654541016, 2.72701358795166, -2.93323755264282, -2.52485227584839, -1.94970870018005, -1.59856152534485, -1.07153189182281, -0.66740131378174], [-0.03845011070371, 0.38902559876442, 0.80676937103271, 1.49568378925323, 1.84655094146729, 2.27760767936707, 2.78853869438171, -3.17100173631777, -2.76101875305176, -2.25475215911865, -1.8054746389389, -1.53082549571991, -1.07445561885834, -0.38467282056808], [0.46372589468956, 1.04847764968872, 1.67178308963776, 2.08516383171082, 3.01186490058899, -2.92715644836426, -2.47745156288147, -2.04341411590576, -1.65392136573792, -1.08836352825165, -0.63805478811264, -0.19743323326111], [-0.214101344347, 0.23505657911301, 0.6795095205307, 1.22472286224365, 1.72636115550995, 2.11112952232361, 2.60569548606873, 3.14159274101257, -2.51201605796814, -2.0485475063324, -1.5220639705658, -0.81996500492096, -0.32180932164192, 0.0440976805985], [-0.27835139632225, 0.22508089244366, 0.53292959928513, 0.96765792369843, 1.50638210773468, 1.92950260639191, 2.64416790008545, -3.05766177177429, -2.66470813751221, -2.27195978164673, -1.75508546829224, -1.3072817325592, -0.89615088701248, -0.55025309324265], [-0.19743320345879, 0.3735636472702, 0.92102020978928, 1.65878653526306, 2.1654646396637, 2.64216351509094, -3.01548004150391, -2.66901636123657, -2.27782654762268, -1.67350625991821, -1.08639907836914, -0.14192448556423], [0.24502477049828, 0.84099400043488, 1.46654498577118, 2.2512218952179, -3.14159256616701, -2.78083610534668, -2.37044978141785, -1.90183222293854, -1.38084435462952, -0.69254273176193, -0.07395347207785],
	],
]

enum SYMBOL {
	H_LINE_R, H_LINE_L, V_LINE_D, V_LINE_U, CARET_UP_R, CARET_UP_L, CARET_DOWN_R, CARET_DOWN_L, #7
	LIGHTNING, CARET_LEFT_D, CARET_LEFT_U, CARET_RIGHT_D, CARET_RIGHT_U, CIRCLE_R, CIRCLE_L, #14
	NONE
}

signal symbol(symbols: Array[SYMBOL])
signal click()
signal redraw()

func _ready():
	NN.set_nn_data(INPUT_LIMIT + 1, NUM_SYMBOLS * 5, NUM_SYMBOLS)
	if LOAD_NN:
		if NN.can_load(SAVE_PATH):
			NN.load_data(SAVE_PATH)
		else:
			for i in range(16):
				train()

func _draw():
	if DRAW_LINE and points.size() >= 2:
		draw_circle(points[0], 12, Color8(255, 255, 255))
		draw_circle(points[-1], 12, Color8(255, 255, 255))
		draw_polyline(points, Color8(255, 255, 255), 24, true)

func _set_take_input(value):
	if not value:
		points = []
		redraw.emit()
		events = {}
	TAKE_INPUT = value

func _unhandled_input(event):
	if not TAKE_INPUT:
		return
	
	if event is InputEventMouseButton:
		if event.button_index == MOUSE_BUTTON_RIGHT:
			if event.pressed:
				if LOG_TRAINING_SET:
					for i in range(NUM_SYMBOLS):
						print(inputs[i])
				if TRAINING:
					train()
			return
		if event.pressed and events.size() == 0:
			points.append(event.position)
			queue_redraw()
			redraw.emit()
			events[event.button_index] = event
			line = []
		else:
			points = PackedVector2Array([])
			queue_redraw()
			redraw.emit()
			events.erase(event.button_index)
			angles = []
			for item in line:
				angles.push_back(item.angle())
			var top_half_count = 0
			var bottom_half_count = 0
			for angle in angles:
				if angle > 0 and angle < 3.05:
					top_half_count += 1
				if angle < 0 and angle > -3.05:
					bottom_half_count += 1
			if top_half_count < bottom_half_count:
				for i in range(angles.size()):
					if angles[i] > 3.025:
						angles[i] -= 2*PI
			elif top_half_count >= bottom_half_count:
				for i in range(angles.size()):
					if angles[i] < -3.025:
						angles[i] += 2*PI
			line = []
			if LOG_INPUT:
				print(angles)
			if angles.size() == 0:
				click.emit()
			else:
				if RECOGNIZE: 
					check()
				if UPDATE_TRAINING_SET:
					inputs[curr_symbol].push_back(angles)
					curr_symbol += 1
					if curr_symbol >= NUM_SYMBOLS:
						curr_symbol = 0
						print(inputs[0].size())

	if event is InputEventMouseMotion:
		if events.size() == 1:
			points.append(event.position)
			queue_redraw()
			redraw.emit()
			event_acc += event.relative
			if line.size() > 0:
				var diff = abs(line[-1].angle() - event.relative.angle())
				diff = min(diff, abs(diff - 2*PI))
				if diff < PI / 12:
					line[-1] += event_acc
					event_acc = Vector2(0, 0)
			if event_acc.length_squared() > 1500:
				line.push_back(event_acc)
				event_acc = Vector2(0, 0)

func train():
	var set_length = inputs[0].size()
	for i in range(5):
		for j in range(set_length):
			for _curr_symbol in range(NUM_SYMBOLS):
				train_on_set(_curr_symbol, j)
	if SAVE_NN:
		NN.save_data(SAVE_PATH)
		
	if TRAINING:
		print('done')

func train_on_set(_symbol_set_index: int, _input_index: int):
	var _input: Array[float] = []
	var _target: Array[float] = []
	for i in range(INPUT_LIMIT):
		_input.push_back(0.0)
	for i in inputs[_symbol_set_index][_input_index].size():
		_input[i] = inputs[_symbol_set_index][_input_index][i] * 1.0
	_input.push_back(inputs[_symbol_set_index][_input_index].size() * 1.0 / INPUT_LIMIT)
	for i in range(NUM_SYMBOLS):
		_target.push_back(1.0 if i == _symbol_set_index else 0.0)
	NN.train(_input, _target)

func check():
	var _input: Array[float] = []
	for i in range(INPUT_LIMIT):
		_input.push_back(0.0)
	for i in range(min(angles.size(), INPUT_LIMIT)):
		_input[i] = angles[i]
	_input.push_back(min(angles.size(), INPUT_LIMIT) * 1.0 / INPUT_LIMIT)
	if LOG_INPUT:
		print(_input)
	var output = NN.predict(_input)
	if LOG_RECOGNIZE:
		print(output)
	var result = get_prediction(output)
	if LOG_RECOGNIZE:
		print(result)
	emit_prediction(result)

func get_prediction(output: Array) -> Array[SYMBOL]:
	var _max = -1
	var _max_pos = -1
	var _scores = {}
	for i in range(output.size()):
		if output[i] > _max:
			_max = output[i]
			_max_pos = i
		if output[i] > 0.15:
			_scores[SYMBOL[SYMBOL.keys()[i]]] = output[i]
	if _max < 0.15:
		return [SYMBOL.NONE]
	var _keys = _scores.keys()
	_keys.sort_custom(func(a, b): return _scores[a] > _scores[b])
	var _result: Array[SYMBOL] = []
	for i in range(min(TRESHOLD, _keys.size())):
		_result.push_back(_keys[i])
	return _result

func emit_prediction(_symbols: Array[SYMBOL]) -> void:
	symbol.emit(_symbols)
